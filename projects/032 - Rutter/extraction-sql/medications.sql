--┌─────────────┐
--│ Medications │
--└─────────────┘

------------ RESEARCH DATA ENGINEER CHECK ------------


-- All prescriptions of medications for type 2 diabetes patients.

-- OUTPUT: Data with the following fields
-- 	-   PatientId (int)
--	-	MedicationDescription
--	-	PrescriptionDate (YYYY-MM-DD)

-- Set the start date
DECLARE @StartDate datetime;
SET @StartDate = '2019-07-01';

--Just want the output, not the messages
SET NOCOUNT ON;

-- Find all patients alive at start date
IF OBJECT_ID('tempdb..#PossiblePatients') IS NOT NULL DROP TABLE #PossiblePatients;
SELECT PK_Patient_Link_ID as FK_Patient_Link_ID, EthnicMainGroup, DeathDate INTO #PossiblePatients FROM [RLS].vw_Patient_Link
WHERE (DeathDate IS NULL OR DeathDate >= @StartDate);

-- Find all patients registered with a GP
IF OBJECT_ID('tempdb..#PatientsWithGP') IS NOT NULL DROP TABLE #PatientsWithGP;
SELECT DISTINCT FK_Patient_Link_ID INTO #PatientsWithGP FROM [RLS].vw_Patient
where FK_Reference_Tenancy_ID = 2;

-- Make cohort from patients alive at start date and registered with a GP
IF OBJECT_ID('tempdb..#Patients') IS NOT NULL DROP TABLE #Patients;
SELECT pp.* INTO #Patients FROM #PossiblePatients pp
INNER JOIN #PatientsWithGP gp on gp.FK_Patient_Link_ID = pp.FK_Patient_Link_ID;

-- >>> Codesets required... Inserting the code set code
--
--┌────────────────────┐
--│ Clinical code sets │
--└────────────────────┘

-- OBJECTIVE: To populate temporary tables with the existing clinical code sets.
--            See the [SQL-generation-process.md](SQL-generation-process.md) for more details.

-- INPUT: No pre-requisites

-- OUTPUT: Five temp tables as follows:
--  #AllCodes (Concept, Version, Code)
--  #CodeSets (FK_Reference_Coding_ID, Concept)
--  #SnomedSets (FK_Reference_SnomedCT_ID, FK_SNOMED_ID)
--  #VersionedCodeSets (FK_Reference_Coding_ID, Concept, Version)
--  #VersionedSnomedSets (FK_Reference_SnomedCT_ID, Version, FK_SNOMED_ID)

--!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
--!!! DO NOT EDIT THIS FILE MANUALLY !!!
--!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

IF OBJECT_ID('tempdb..#AllCodes') IS NOT NULL DROP TABLE #AllCodes;
CREATE TABLE #AllCodes (
  [Concept] [varchar](255) NOT NULL,
  [Version] INT NOT NULL,
  [Code] [varchar](20) COLLATE Latin1_General_CS_AS NOT NULL,
  [description] [varchar] (255) NULL 
);

IF OBJECT_ID('tempdb..#codesreadv2') IS NOT NULL DROP TABLE #codesreadv2;
CREATE TABLE #codesreadv2 (
  [concept] [varchar](255) NOT NULL,
  [version] INT NOT NULL,
	[code] [varchar](20) COLLATE Latin1_General_CS_AS NOT NULL,
	[description] [varchar](255) NULL
) ON [PRIMARY];

INSERT INTO #codesreadv2
VALUES ('diabetes-type-ii',1,'C100100','Diabetes mellitus, adult onset, with no mention of complication'),('diabetes-type-ii',1,'C1001','Diabetes mellitus, adult onset, with no mention of complication'),('diabetes-type-ii',1,'C100112','Non-insulin dependent diabetes mellitus'),('diabetes-type-ii',1,'C1001','Non-insulin dependent diabetes mellitus'),('diabetes-type-ii',1,'C101100','Diabetes mellitus, adult onset, with ketoacidosis'),('diabetes-type-ii',1,'C1011','Diabetes mellitus, adult onset, with ketoacidosis'),('diabetes-type-ii',1,'C102100','Diabetes mellitus, adult onset, with hyperosmolar coma'),('diabetes-type-ii',1,'C1021','Diabetes mellitus, adult onset, with hyperosmolar coma'),('diabetes-type-ii',1,'C103100','Diabetes mellitus, adult onset, with ketoacidotic coma'),('diabetes-type-ii',1,'C1031','Diabetes mellitus, adult onset, with ketoacidotic coma'),('diabetes-type-ii',1,'C104100','Diabetes mellitus, adult onset, with renal manifestation'),('diabetes-type-ii',1,'C1041','Diabetes mellitus, adult onset, with renal manifestation'),('diabetes-type-ii',1,'C105100','Diabetes mellitus, adult onset, with ophthalmic manifestation'),('diabetes-type-ii',1,'C1051','Diabetes mellitus, adult onset, with ophthalmic manifestation'),('diabetes-type-ii',1,'C106100','Diabetes mellitus, adult onset, with neurological manifestation'),('diabetes-type-ii',1,'C1061','Diabetes mellitus, adult onset, with neurological manifestation'),('diabetes-type-ii',1,'C107100','Diabetes mellitus, adult onset, with peripheral circulatory disorder'),('diabetes-type-ii',1,'C1071','Diabetes mellitus, adult onset, with peripheral circulatory disorder'),('diabetes-type-ii',1,'C109.00','Non-insulin dependent diabetes mellitus'),('diabetes-type-ii',1,'C109.','Non-insulin dependent diabetes mellitus'),('diabetes-type-ii',1,'C109.11','NIDDM - Non-insulin dependent diabetes mellitus'),('diabetes-type-ii',1,'C109.','NIDDM - Non-insulin dependent diabetes mellitus'),('diabetes-type-ii',1,'C109.12','Type 2 diabetes mellitus'),('diabetes-type-ii',1,'C109.','Type 2 diabetes mellitus'),('diabetes-type-ii',1,'C109.13','Type II diabetes mellitus'),('diabetes-type-ii',1,'C109.','Type II diabetes mellitus'),('diabetes-type-ii',1,'C109000','Non-insulin-dependent diabetes mellitus with renal complications'),('diabetes-type-ii',1,'C1090','Non-insulin-dependent diabetes mellitus with renal complications'),('diabetes-type-ii',1,'C109011','Type II diabetes mellitus with renal complications'),('diabetes-type-ii',1,'C1090','Type II diabetes mellitus with renal complications'),('diabetes-type-ii',1,'C109012','Type 2 diabetes mellitus with renal complications'),('diabetes-type-ii',1,'C1090','Type 2 diabetes mellitus with renal complications'),('diabetes-type-ii',1,'C109100','Non-insulin-dependent diabetes mellitus with ophthalmic complications'),('diabetes-type-ii',1,'C1091','Non-insulin-dependent diabetes mellitus with ophthalmic complications'),('diabetes-type-ii',1,'C109111','Type II diabetes mellitus with ophthalmic complications'),('diabetes-type-ii',1,'C1091','Type II diabetes mellitus with ophthalmic complications'),('diabetes-type-ii',1,'C109112','Type 2 diabetes mellitus with ophthalmic complications'),('diabetes-type-ii',1,'C1091','Type 2 diabetes mellitus with ophthalmic complications'),('diabetes-type-ii',1,'C109200','Non-insulin-dependent diabetes mellitus with neurological complications'),('diabetes-type-ii',1,'C1092','Non-insulin-dependent diabetes mellitus with neurological complications'),('diabetes-type-ii',1,'C109211','Type II diabetes mellitus with neurological complications'),('diabetes-type-ii',1,'C1092','Type II diabetes mellitus with neurological complications'),('diabetes-type-ii',1,'C109212','Type 2 diabetes mellitus with neurological complications'),('diabetes-type-ii',1,'C1092','Type 2 diabetes mellitus with neurological complications'),('diabetes-type-ii',1,'C109300','Non-insulin-dependent diabetes mellitus with multiple complications'),('diabetes-type-ii',1,'C1093','Non-insulin-dependent diabetes mellitus with multiple complications'),('diabetes-type-ii',1,'C109311','Type II diabetes mellitus with multiple complications'),('diabetes-type-ii',1,'C1093','Type II diabetes mellitus with multiple complications'),('diabetes-type-ii',1,'C109312','Type 2 diabetes mellitus with multiple complications'),('diabetes-type-ii',1,'C1093','Type 2 diabetes mellitus with multiple complications'),('diabetes-type-ii',1,'C109400','Non-insulin dependent diabetes mellitus with ulcer'),('diabetes-type-ii',1,'C1094','Non-insulin dependent diabetes mellitus with ulcer'),('diabetes-type-ii',1,'C109411','Type II diabetes mellitus with ulcer'),('diabetes-type-ii',1,'C1094','Type II diabetes mellitus with ulcer'),('diabetes-type-ii',1,'C109412','Type 2 diabetes mellitus with ulcer'),('diabetes-type-ii',1,'C1094','Type 2 diabetes mellitus with ulcer'),('diabetes-type-ii',1,'C109500','Non-insulin dependent diabetes mellitus with gangrene'),('diabetes-type-ii',1,'C1095','Non-insulin dependent diabetes mellitus with gangrene'),('diabetes-type-ii',1,'C109511','Type II diabetes mellitus with gangrene'),('diabetes-type-ii',1,'C1095','Type II diabetes mellitus with gangrene'),('diabetes-type-ii',1,'C109512','Type 2 diabetes mellitus with gangrene'),('diabetes-type-ii',1,'C1095','Type 2 diabetes mellitus with gangrene'),('diabetes-type-ii',1,'C109600','Non-insulin-dependent diabetes mellitus with retinopathy'),('diabetes-type-ii',1,'C1096','Non-insulin-dependent diabetes mellitus with retinopathy'),('diabetes-type-ii',1,'C109611','Type II diabetes mellitus with retinopathy'),('diabetes-type-ii',1,'C1096','Type II diabetes mellitus with retinopathy'),('diabetes-type-ii',1,'C109612','Type 2 diabetes mellitus with retinopathy'),('diabetes-type-ii',1,'C1096','Type 2 diabetes mellitus with retinopathy'),('diabetes-type-ii',1,'C109700','Non-insulin dependent diabetes mellitus - poor control'),('diabetes-type-ii',1,'C1097','Non-insulin dependent diabetes mellitus - poor control'),('diabetes-type-ii',1,'C109711','Type II diabetes mellitus - poor control'),('diabetes-type-ii',1,'C1097','Type II diabetes mellitus - poor control'),('diabetes-type-ii',1,'C109712','Type 2 diabetes mellitus - poor control'),('diabetes-type-ii',1,'C1097','Type 2 diabetes mellitus - poor control'),('diabetes-type-ii',1,'C109900','Non-insulin-dependent diabetes mellitus without complication'),('diabetes-type-ii',1,'C1099','Non-insulin-dependent diabetes mellitus without complication'),('diabetes-type-ii',1,'C109911','Type II diabetes mellitus without complication'),('diabetes-type-ii',1,'C1099','Type II diabetes mellitus without complication'),('diabetes-type-ii',1,'C109912','Type 2 diabetes mellitus without complication'),('diabetes-type-ii',1,'C1099','Type 2 diabetes mellitus without complication'),('diabetes-type-ii',1,'C109A00','Non-insulin dependent diabetes mellitus with mononeuropathy'),('diabetes-type-ii',1,'C109A','Non-insulin dependent diabetes mellitus with mononeuropathy'),('diabetes-type-ii',1,'C109A11','Type II diabetes mellitus with mononeuropathy'),('diabetes-type-ii',1,'C109A','Type II diabetes mellitus with mononeuropathy'),('diabetes-type-ii',1,'C109A12','Type 2 diabetes mellitus with mononeuropathy'),('diabetes-type-ii',1,'C109A','Type 2 diabetes mellitus with mononeuropathy'),('diabetes-type-ii',1,'C109B00','Non-insulin dependent diabetes mellitus with polyneuropathy'),('diabetes-type-ii',1,'C109B','Non-insulin dependent diabetes mellitus with polyneuropathy'),('diabetes-type-ii',1,'C109B11','Type II diabetes mellitus with polyneuropathy'),('diabetes-type-ii',1,'C109B','Type II diabetes mellitus with polyneuropathy'),('diabetes-type-ii',1,'C109B12','Type 2 diabetes mellitus with polyneuropathy'),('diabetes-type-ii',1,'C109B','Type 2 diabetes mellitus with polyneuropathy'),('diabetes-type-ii',1,'C109C00','Non-insulin dependent diabetes mellitus with nephropathy'),('diabetes-type-ii',1,'C109C','Non-insulin dependent diabetes mellitus with nephropathy'),('diabetes-type-ii',1,'C109C11','Type II diabetes mellitus with nephropathy'),('diabetes-type-ii',1,'C109C','Type II diabetes mellitus with nephropathy'),('diabetes-type-ii',1,'C109C12','Type 2 diabetes mellitus with nephropathy'),('diabetes-type-ii',1,'C109C','Type 2 diabetes mellitus with nephropathy'),('diabetes-type-ii',1,'C109D00','Non-insulin dependent diabetes mellitus with hypoglycaemic coma'),('diabetes-type-ii',1,'C109D','Non-insulin dependent diabetes mellitus with hypoglycaemic coma'),('diabetes-type-ii',1,'C109D11','Type II diabetes mellitus with hypoglycaemic coma'),('diabetes-type-ii',1,'C109D','Type II diabetes mellitus with hypoglycaemic coma'),('diabetes-type-ii',1,'C109D12','Type 2 diabetes mellitus with hypoglycaemic coma'),('diabetes-type-ii',1,'C109D','Type 2 diabetes mellitus with hypoglycaemic coma'),('diabetes-type-ii',1,'C109E00','Non-insulin dependent diabetes mellitus with diabetic cataract'),('diabetes-type-ii',1,'C109E','Non-insulin dependent diabetes mellitus with diabetic cataract'),('diabetes-type-ii',1,'C109E11','Type II diabetes mellitus with diabetic cataract'),('diabetes-type-ii',1,'C109E','Type II diabetes mellitus with diabetic cataract'),('diabetes-type-ii',1,'C109E12','Type 2 diabetes mellitus with diabetic cataract'),('diabetes-type-ii',1,'C109E','Type 2 diabetes mellitus with diabetic cataract'),('diabetes-type-ii',1,'C109F00','Non-insulin-dependent diabetes mellitus with peripheral angiopathy'),('diabetes-type-ii',1,'C109F','Non-insulin-dependent diabetes mellitus with peripheral angiopathy'),('diabetes-type-ii',1,'C109F11','Type II diabetes mellitus with peripheral angiopathy'),('diabetes-type-ii',1,'C109F','Type II diabetes mellitus with peripheral angiopathy'),('diabetes-type-ii',1,'C109F12','Type 2 diabetes mellitus with peripheral angiopathy'),('diabetes-type-ii',1,'C109F','Type 2 diabetes mellitus with peripheral angiopathy'),
('diabetes-type-ii',1,'C109G00','Non-insulin dependent diabetes mellitus with arthropathy'),('diabetes-type-ii',1,'C109G','Non-insulin dependent diabetes mellitus with arthropathy'),('diabetes-type-ii',1,'C109G11','Type II diabetes mellitus with arthropathy'),('diabetes-type-ii',1,'C109G','Type II diabetes mellitus with arthropathy'),('diabetes-type-ii',1,'C109G12','Type 2 diabetes mellitus with arthropathy'),('diabetes-type-ii',1,'C109G','Type 2 diabetes mellitus with arthropathy'),('diabetes-type-ii',1,'C109H00','Non-insulin dependent diabetes mellitus with neuropathic arthropathy'),('diabetes-type-ii',1,'C109H','Non-insulin dependent diabetes mellitus with neuropathic arthropathy'),('diabetes-type-ii',1,'C109H11','Type II diabetes mellitus with neuropathic arthropathy'),('diabetes-type-ii',1,'C109H','Type II diabetes mellitus with neuropathic arthropathy'),('diabetes-type-ii',1,'C109H12','Type 2 diabetes mellitus with neuropathic arthropathy'),('diabetes-type-ii',1,'C109H','Type 2 diabetes mellitus with neuropathic arthropathy'),('diabetes-type-ii',1,'C109J00','Insulin treated Type 2 diabetes mellitus'),('diabetes-type-ii',1,'C109J','Insulin treated Type 2 diabetes mellitus'),('diabetes-type-ii',1,'C109J11','Insulin treated non-insulin dependent diabetes mellitus'),('diabetes-type-ii',1,'C109J','Insulin treated non-insulin dependent diabetes mellitus'),('diabetes-type-ii',1,'C109J12','Insulin treated Type II diabetes mellitus'),('diabetes-type-ii',1,'C109J','Insulin treated Type II diabetes mellitus'),('diabetes-type-ii',1,'C109K00','Hyperosmolar non-ketotic state in type 2 diabetes mellitus'),('diabetes-type-ii',1,'C109K','Hyperosmolar non-ketotic state in type 2 diabetes mellitus'),('diabetes-type-ii',1,'C10D.00','Diabetes mellitus autosomal dominant type 2'),('diabetes-type-ii',1,'C10D.','Diabetes mellitus autosomal dominant type 2'),('diabetes-type-ii',1,'C10F.00','Type 2 diabetes mellitus'),('diabetes-type-ii',1,'C10F.','Type 2 diabetes mellitus'),('diabetes-type-ii',1,'C10F.11','Type II diabetes mellitus'),('diabetes-type-ii',1,'C10F.','Type II diabetes mellitus'),('diabetes-type-ii',1,'C10F000','Type 2 diabetes mellitus with renal complications'),('diabetes-type-ii',1,'C10F0','Type 2 diabetes mellitus with renal complications'),('diabetes-type-ii',1,'C10F011','Type II diabetes mellitus with renal complications'),('diabetes-type-ii',1,'C10F0','Type II diabetes mellitus with renal complications'),('diabetes-type-ii',1,'C10F100','Type 2 diabetes mellitus with ophthalmic complications'),('diabetes-type-ii',1,'C10F1','Type 2 diabetes mellitus with ophthalmic complications'),('diabetes-type-ii',1,'C10F111','Type II diabetes mellitus with ophthalmic complications'),('diabetes-type-ii',1,'C10F1','Type II diabetes mellitus with ophthalmic complications'),('diabetes-type-ii',1,'C10F200','Type 2 diabetes mellitus with neurological complications'),('diabetes-type-ii',1,'C10F2','Type 2 diabetes mellitus with neurological complications'),('diabetes-type-ii',1,'C10F211','Type II diabetes mellitus with neurological complications'),('diabetes-type-ii',1,'C10F2','Type II diabetes mellitus with neurological complications'),('diabetes-type-ii',1,'C10F300','Type 2 diabetes mellitus with multiple complications'),('diabetes-type-ii',1,'C10F3','Type 2 diabetes mellitus with multiple complications'),('diabetes-type-ii',1,'C10F311','Type II diabetes mellitus with multiple complications'),('diabetes-type-ii',1,'C10F3','Type II diabetes mellitus with multiple complications'),('diabetes-type-ii',1,'C10F400','Type 2 diabetes mellitus with ulcer'),('diabetes-type-ii',1,'C10F4','Type 2 diabetes mellitus with ulcer'),('diabetes-type-ii',1,'C10F411','Type II diabetes mellitus with ulcer'),('diabetes-type-ii',1,'C10F4','Type II diabetes mellitus with ulcer'),('diabetes-type-ii',1,'C10F500','Type 2 diabetes mellitus with gangrene'),('diabetes-type-ii',1,'C10F5','Type 2 diabetes mellitus with gangrene'),('diabetes-type-ii',1,'C10F511','Type II diabetes mellitus with gangrene'),('diabetes-type-ii',1,'C10F5','Type II diabetes mellitus with gangrene'),('diabetes-type-ii',1,'C10F600','Type 2 diabetes mellitus with retinopathy'),('diabetes-type-ii',1,'C10F6','Type 2 diabetes mellitus with retinopathy'),('diabetes-type-ii',1,'C10F611','Type II diabetes mellitus with retinopathy'),('diabetes-type-ii',1,'C10F6','Type II diabetes mellitus with retinopathy'),('diabetes-type-ii',1,'C10F700','Type 2 diabetes mellitus - poor control'),('diabetes-type-ii',1,'C10F7','Type 2 diabetes mellitus - poor control'),('diabetes-type-ii',1,'C10F711','Type II diabetes mellitus - poor control'),('diabetes-type-ii',1,'C10F7','Type II diabetes mellitus - poor control'),('diabetes-type-ii',1,'C10F900','Type 2 diabetes mellitus without complication'),('diabetes-type-ii',1,'C10F9','Type 2 diabetes mellitus without complication'),('diabetes-type-ii',1,'C10F911','Type II diabetes mellitus without complication'),('diabetes-type-ii',1,'C10F9','Type II diabetes mellitus without complication'),('diabetes-type-ii',1,'C10FA00','Type 2 diabetes mellitus with mononeuropathy'),('diabetes-type-ii',1,'C10FA','Type 2 diabetes mellitus with mononeuropathy'),('diabetes-type-ii',1,'C10FA11','Type II diabetes mellitus with mononeuropathy'),('diabetes-type-ii',1,'C10FA','Type II diabetes mellitus with mononeuropathy'),('diabetes-type-ii',1,'C10FB00','Type 2 diabetes mellitus with polyneuropathy'),('diabetes-type-ii',1,'C10FB','Type 2 diabetes mellitus with polyneuropathy'),('diabetes-type-ii',1,'C10FB11','Type II diabetes mellitus with polyneuropathy'),('diabetes-type-ii',1,'C10FB','Type II diabetes mellitus with polyneuropathy'),('diabetes-type-ii',1,'C10FC00','Type 2 diabetes mellitus with nephropathy'),('diabetes-type-ii',1,'C10FC','Type 2 diabetes mellitus with nephropathy'),('diabetes-type-ii',1,'C10FC11','Type II diabetes mellitus with nephropathy'),('diabetes-type-ii',1,'C10FC','Type II diabetes mellitus with nephropathy'),('diabetes-type-ii',1,'C10FD00','Type 2 diabetes mellitus with hypoglycaemic coma'),('diabetes-type-ii',1,'C10FD','Type 2 diabetes mellitus with hypoglycaemic coma'),('diabetes-type-ii',1,'C10FD11','Type II diabetes mellitus with hypoglycaemic coma'),('diabetes-type-ii',1,'C10FD','Type II diabetes mellitus with hypoglycaemic coma'),('diabetes-type-ii',1,'C10FE00','Type 2 diabetes mellitus with diabetic cataract'),('diabetes-type-ii',1,'C10FE','Type 2 diabetes mellitus with diabetic cataract'),('diabetes-type-ii',1,'C10FE11','Type II diabetes mellitus with diabetic cataract'),('diabetes-type-ii',1,'C10FE','Type II diabetes mellitus with diabetic cataract'),('diabetes-type-ii',1,'C10FF00','Type 2 diabetes mellitus with peripheral angiopathy'),('diabetes-type-ii',1,'C10FF','Type 2 diabetes mellitus with peripheral angiopathy'),('diabetes-type-ii',1,'C10FF11','Type II diabetes mellitus with peripheral angiopathy'),('diabetes-type-ii',1,'C10FF','Type II diabetes mellitus with peripheral angiopathy'),('diabetes-type-ii',1,'C10FG00','Type 2 diabetes mellitus with arthropathy'),('diabetes-type-ii',1,'C10FG','Type 2 diabetes mellitus with arthropathy'),('diabetes-type-ii',1,'C10FG11','Type II diabetes mellitus with arthropathy'),('diabetes-type-ii',1,'C10FG','Type II diabetes mellitus with arthropathy'),('diabetes-type-ii',1,'C10FH00','Type 2 diabetes mellitus with neuropathic arthropathy'),('diabetes-type-ii',1,'C10FH','Type 2 diabetes mellitus with neuropathic arthropathy'),('diabetes-type-ii',1,'C10FH11','Type II diabetes mellitus with neuropathic arthropathy'),('diabetes-type-ii',1,'C10FH','Type II diabetes mellitus with neuropathic arthropathy'),('diabetes-type-ii',1,'C10FJ00','Insulin treated Type 2 diabetes mellitus'),('diabetes-type-ii',1,'C10FJ','Insulin treated Type 2 diabetes mellitus'),('diabetes-type-ii',1,'C10FJ11','Insulin treated Type II diabetes mellitus'),('diabetes-type-ii',1,'C10FJ','Insulin treated Type II diabetes mellitus'),('diabetes-type-ii',1,'C10FK00','Hyperosmolar non-ketotic state in type 2 diabetes mellitus'),('diabetes-type-ii',1,'C10FK','Hyperosmolar non-ketotic state in type 2 diabetes mellitus'),('diabetes-type-ii',1,'C10FK11','Hyperosmolar non-ketotic state in type II diabetes mellitus'),('diabetes-type-ii',1,'C10FK','Hyperosmolar non-ketotic state in type II diabetes mellitus'),('diabetes-type-ii',1,'C10FL00','Type 2 diabetes mellitus with persistent proteinuria'),('diabetes-type-ii',1,'C10FL','Type 2 diabetes mellitus with persistent proteinuria'),('diabetes-type-ii',1,'C10FL11','Type II diabetes mellitus with persistent proteinuria'),('diabetes-type-ii',1,'C10FL','Type II diabetes mellitus with persistent proteinuria'),('diabetes-type-ii',1,'C10FM00','Type 2 diabetes mellitus with persistent microalbuminuria'),('diabetes-type-ii',1,'C10FM','Type 2 diabetes mellitus with persistent microalbuminuria'),('diabetes-type-ii',1,'C10FM11','Type II diabetes mellitus with persistent microalbuminuria'),('diabetes-type-ii',1,'C10FM','Type II diabetes mellitus with persistent microalbuminuria'),('diabetes-type-ii',1,'C10FN00','Type 2 diabetes mellitus with ketoacidosis'),('diabetes-type-ii',1,'C10FN','Type 2 diabetes mellitus with ketoacidosis'),('diabetes-type-ii',1,'C10FN11','Type II diabetes mellitus with ketoacidosis'),('diabetes-type-ii',1,'C10FN','Type II diabetes mellitus with ketoacidosis'),('diabetes-type-ii',1,'C10FP00','Type 2 diabetes mellitus with ketoacidotic coma'),('diabetes-type-ii',1,'C10FP','Type 2 diabetes mellitus with ketoacidotic coma'),('diabetes-type-ii',1,'C10FP11','Type II diabetes mellitus with ketoacidotic coma'),('diabetes-type-ii',1,'C10FP','Type II diabetes mellitus with ketoacidotic coma'),('diabetes-type-ii',1,'C10FQ00','Type 2 diabetes mellitus with exudative maculopathy'),('diabetes-type-ii',1,'C10FQ','Type 2 diabetes mellitus with exudative maculopathy'),('diabetes-type-ii',1,'C10FQ11','Type II diabetes mellitus with exudative maculopathy'),
('diabetes-type-ii',1,'C10FQ','Type II diabetes mellitus with exudative maculopathy'),('diabetes-type-ii',1,'C10FR00','Type 2 diabetes mellitus with gastroparesis'),('diabetes-type-ii',1,'C10FR','Type 2 diabetes mellitus with gastroparesis'),('diabetes-type-ii',1,'C10FR11','Type II diabetes mellitus with gastroparesis'),('diabetes-type-ii',1,'C10FR','Type II diabetes mellitus with gastroparesis'),('diabetes-type-ii',1,'C10y100','Diabetes mellitus, adult onset, with other specified manifestation'),('diabetes-type-ii',1,'C10y1','Diabetes mellitus, adult onset, with other specified manifestation'),('diabetes-type-ii',1,'C10z100','Diabetes mellitus, adult onset, with unspecified complication'),('diabetes-type-ii',1,'C10z1','Diabetes mellitus, adult onset, with unspecified complication');
INSERT INTO #codesreadv2
VALUES ('gestational-diabetes',1,'L1808','Gestational diabetes mellitus'),('gestational-diabetes',1,'L180800','Gestational diabetes mellitus'),('gestational-diabetes',1,'L1809','Gestational diabetes mellitus'),('gestational-diabetes',1,'L180900','Gestational diabetes mellitus');
INSERT INTO #codesreadv2
VALUES ('polycystic-ovarian-syndrome',1,'12FA.','FH: Polycystic ovaries'),('polycystic-ovarian-syndrome',1,'12FA.00','FH: Polycystic ovaries'),('polycystic-ovarian-syndrome',1,'C164.','Polycystic ovaries'),('polycystic-ovarian-syndrome',1,'C164.00','Polycystic ovaries'),('polycystic-ovarian-syndrome',1,'C165.','Polycystic ovarian syndrome'),('polycystic-ovarian-syndrome',1,'C165.00','Polycystic ovarian syndrome')

INSERT INTO #AllCodes
SELECT [concept], [version], [code], [description] from #codesreadv2;

IF OBJECT_ID('tempdb..#codesctv3') IS NOT NULL DROP TABLE #codesctv3;
CREATE TABLE #codesctv3 (
  [concept] [varchar](255) NOT NULL,
  [version] INT NOT NULL,
	[code] [varchar](20) COLLATE Latin1_General_CS_AS NOT NULL,
	[description] [varchar](255) NULL
) ON [PRIMARY];

INSERT INTO #codesctv3
VALUES ('diabetes-type-ii',1,'C1011','Diabetes mellitus, adult onset, with ketoacidosis'),('diabetes-type-ii',1,'C1021','Diabetes mellitus, adult onset, with hyperosmolar coma'),('diabetes-type-ii',1,'C1031','Diabetes mellitus, adult onset, with ketoacidotic coma'),('diabetes-type-ii',1,'C1041','Diabetes mellitus, adult onset, with renal manifestation'),('diabetes-type-ii',1,'C1051','Diabetes mellitus, adult onset, with ophthalmic manifestation'),('diabetes-type-ii',1,'C1061','Diabetes mellitus, adult onset, with neurological manifestation'),('diabetes-type-ii',1,'C1071','Diabetes mellitus, adult onset, with peripheral circulatory disorder'),('diabetes-type-ii',1,'C1090','Non-insulin-dependent diabetes mellitus with renal complications'),('diabetes-type-ii',1,'C1091','Non-insulin-dependent diabetes mellitus with ophthalmic complications'),('diabetes-type-ii',1,'C1092','Non-insulin-dependent diabetes mellitus with neurological complications'),('diabetes-type-ii',1,'C1093','Non-insulin-dependent diabetes mellitus with multiple complications'),('diabetes-type-ii',1,'C1094','Non-insulin-dependent diabetes mellitus with ulcer'),('diabetes-type-ii',1,'C1095','Non-insulin-dependent diabetes mellitus with gangrene'),('diabetes-type-ii',1,'C1096','NIDDM - Non-insulin-dependent diabetes mellitus with retinopathy'),('diabetes-type-ii',1,'C1097','Non-insulin-dependent diabetes mellitus - poor control'),('diabetes-type-ii',1,'C10y1','Diabetes mellitus, adult onset, with other specified manifestation'),('diabetes-type-ii',1,'C10z1','Diabetes mellitus, adult onset, with unspecified complication'),('diabetes-type-ii',1,'X40J5','Non-insulin-dependent diabetes mellitus'),('diabetes-type-ii',1,'X40J6','Insulin treated Type 2 diabetes mellitus'),('diabetes-type-ii',1,'X40JJ','Diabetes mellitus autosomal dominant type 2'),('diabetes-type-ii',1,'XE10F','Diabetes mellitus, adult onset, with no mention of complication'),('diabetes-type-ii',1,'XM19j','[EDTA] Diabetes Type II (non-insulin-dependent) associated with renal failure'),('diabetes-type-ii',1,'XaELQ','Non-insulin-dependent diabetes mellitus without complication'),('diabetes-type-ii',1,'XaEnp','Type II diabetes mellitus with mononeuropathy'),('diabetes-type-ii',1,'XaEnq','Type 2 diabetes mellitus with polyneuropathy'),('diabetes-type-ii',1,'XaF05','Type 2 diabetes mellitus with nephropathy'),('diabetes-type-ii',1,'XaFWI','Type II diabetes mellitus with hypoglycaemic coma'),('diabetes-type-ii',1,'XaFmA','Type II diabetes mellitus with diabetic cataract'),('diabetes-type-ii',1,'XaFn7','Non-insulin-dependent diabetes mellitus with peripheral angiopathy'),('diabetes-type-ii',1,'XaFn8','Non-insulin dependent diabetes mellitus with arthropathy'),('diabetes-type-ii',1,'XaFn9','Non-insulin dependent diabetes mellitus with neuropathic arthropathy'),('diabetes-type-ii',1,'XaIfG','Type II diabetes on insulin'),('diabetes-type-ii',1,'XaIfI','Type II diabetes on diet only'),('diabetes-type-ii',1,'XaIrf','Hyperosmolar non-ketotic state in type II diabetes mellitus'),('diabetes-type-ii',1,'XaIzQ','Type 2 diabetes mellitus with persistent proteinuria'),('diabetes-type-ii',1,'XaIzR','Type 2 diabetes mellitus with persistent microalbuminuria'),('diabetes-type-ii',1,'XaJQp','Type II diabetes mellitus with exudative maculopathy'),('diabetes-type-ii',1,'XaKyX','Type II diabetes mellitus with gastroparesis');
INSERT INTO #codesctv3
VALUES ('gestational-diabetes',1,'L1808','Gestational diabetes');
INSERT INTO #codesctv3
VALUES ('polycystic-ovarian-syndrome',1,'X406n','Polycystic ovarian syndrome'),('polycystic-ovarian-syndrome',1,'X406n','Polycystic ovary syndrome'),('polycystic-ovarian-syndrome',1,'XE10l','PCO - Polycystic ovaries'),('polycystic-ovarian-syndrome',1,'XE2p5','(Polycystic ovaries) or (Stein-Leventhal syndrome)'),('polycystic-ovarian-syndrome',1,'XaJZG','FH: Polycystic ovaries'),('polycystic-ovarian-syndrome',1,'C164.','Polycystic ovaries'),('polycystic-ovarian-syndrome',1,'X406n','PCOD - Polycystic ovarian disease'),('polycystic-ovarian-syndrome',1,'XE10l','Polycystic ovaries'),('polycystic-ovarian-syndrome',1,'X406n','PCOS - Polycystic ovarian syndrome'),('polycystic-ovarian-syndrome',1,'XE2p5','Polycystic ovaries'),('polycystic-ovarian-syndrome',1,'C164.','(Polycystic ovaries) or (isosexual virilisation) or (Stein-Leventhal syndrome) or (multicystic ovaries)'),('polycystic-ovarian-syndrome',1,'X406n','Polycystic ovarian disease')

INSERT INTO #AllCodes
SELECT [concept], [version], [code], [description] from #codesctv3;

IF OBJECT_ID('tempdb..#codessnomed') IS NOT NULL DROP TABLE #codessnomed;
CREATE TABLE #codessnomed (
  [concept] [varchar](255) NOT NULL,
  [version] INT NOT NULL,
	[code] [varchar](20) COLLATE Latin1_General_CS_AS NOT NULL,
	[description] [varchar](255) NULL
) ON [PRIMARY];



INSERT INTO #AllCodes
SELECT [concept], [version], [code], [description] from #codessnomed;

IF OBJECT_ID('tempdb..#codesemis') IS NOT NULL DROP TABLE #codesemis;
CREATE TABLE #codesemis (
  [concept] [varchar](255) NOT NULL,
  [version] INT NOT NULL,
	[code] [varchar](20) COLLATE Latin1_General_CS_AS NOT NULL,
	[description] [varchar](255) NULL
) ON [PRIMARY];

INSERT INTO #codesemis
VALUES ('gestational-diabetes',1,'^ESCTGE801661','Gestational diabetes, delivered'),('gestational-diabetes',1,'^ESCTGE801662','Gestational diabetes mellitus complicating pregnancy')

INSERT INTO #AllCodes
SELECT [concept], [version], [code], [description] from #codesemis;


IF OBJECT_ID('tempdb..#TempRefCodes') IS NOT NULL DROP TABLE #TempRefCodes;
CREATE TABLE #TempRefCodes (FK_Reference_Coding_ID BIGINT NOT NULL, concept VARCHAR(255) NOT NULL, version INT NOT NULL, [description] VARCHAR(255));

-- Read v2 codes
INSERT INTO #TempRefCodes
SELECT PK_Reference_Coding_ID, dcr.concept, dcr.[version], dcr.[description]
FROM [SharedCare].[Reference_Coding] rc
INNER JOIN #codesreadv2 dcr on dcr.code = rc.MainCode
WHERE CodingType='ReadCodeV2'
and PK_Reference_Coding_ID != -1;

-- CTV3 codes
INSERT INTO #TempRefCodes
SELECT PK_Reference_Coding_ID, dcc.concept, dcc.[version], dcc.[description]
FROM [SharedCare].[Reference_Coding] rc
INNER JOIN #codesctv3 dcc on dcc.code = rc.MainCode
WHERE CodingType='CTV3'
and PK_Reference_Coding_ID != -1;

-- EMIS codes with a FK Reference Coding ID
INSERT INTO #TempRefCodes
SELECT FK_Reference_Coding_ID, ce.concept, ce.[version], ce.[description]
FROM [SharedCare].[Reference_Local_Code] rlc
INNER JOIN #codesemis ce on ce.code = rlc.LocalCode
WHERE FK_Reference_Coding_ID != -1;

IF OBJECT_ID('tempdb..#TempSNOMEDRefCodes') IS NOT NULL DROP TABLE #TempSNOMEDRefCodes;
CREATE TABLE #TempSNOMEDRefCodes (FK_Reference_SnomedCT_ID BIGINT NOT NULL, concept VARCHAR(255) NOT NULL, [version] INT NOT NULL, [description] VARCHAR(255));

-- SNOMED codes
INSERT INTO #TempSNOMEDRefCodes
SELECT PK_Reference_SnomedCT_ID, dcs.concept, dcs.[version], dcs.[description]
FROM SharedCare.Reference_SnomedCT rs
INNER JOIN #codessnomed dcs on dcs.code = rs.ConceptID;

-- EMIS codes with a FK SNOMED ID but without a FK Reference Coding ID
INSERT INTO #TempSNOMEDRefCodes
SELECT FK_Reference_SnomedCT_ID, ce.concept, ce.[version], ce.[description]
FROM [SharedCare].[Reference_Local_Code] rlc
INNER JOIN #codesemis ce on ce.code = rlc.LocalCode
WHERE FK_Reference_Coding_ID = -1
AND FK_Reference_SnomedCT_ID != -1;

-- De-duped tables
IF OBJECT_ID('tempdb..#CodeSets') IS NOT NULL DROP TABLE #CodeSets;
CREATE TABLE #CodeSets (FK_Reference_Coding_ID BIGINT NOT NULL, concept VARCHAR(255) NOT NULL, [description] VARCHAR(255));

IF OBJECT_ID('tempdb..#SnomedSets') IS NOT NULL DROP TABLE #SnomedSets;
CREATE TABLE #SnomedSets (FK_Reference_SnomedCT_ID BIGINT NOT NULL, concept VARCHAR(255) NOT NULL, [description] VARCHAR(255));

IF OBJECT_ID('tempdb..#VersionedCodeSets') IS NOT NULL DROP TABLE #VersionedCodeSets;
CREATE TABLE #VersionedCodeSets (FK_Reference_Coding_ID BIGINT NOT NULL, Concept VARCHAR(255), [Version] INT, [description] VARCHAR(255));

IF OBJECT_ID('tempdb..#VersionedSnomedSets') IS NOT NULL DROP TABLE #VersionedSnomedSets;
CREATE TABLE #VersionedSnomedSets (FK_Reference_SnomedCT_ID BIGINT NOT NULL, Concept VARCHAR(255), [Version] INT, [description] VARCHAR(255));

INSERT INTO #VersionedCodeSets
SELECT DISTINCT * FROM #TempRefCodes;

INSERT INTO #VersionedSnomedSets
SELECT DISTINCT * FROM #TempSNOMEDRefCodes;

INSERT INTO #CodeSets
SELECT FK_Reference_Coding_ID, c.concept, [description]
FROM #VersionedCodeSets c
INNER JOIN (
  SELECT concept, MAX(version) AS maxVersion FROM #VersionedCodeSets
  GROUP BY concept)
sub ON sub.concept = c.concept AND c.version = sub.maxVersion;

INSERT INTO #SnomedSets
SELECT FK_Reference_SnomedCT_ID, c.concept, [description]
FROM #VersionedSnomedSets c
INNER JOIN (
  SELECT concept, MAX(version) AS maxVersion FROM #VersionedSnomedSets
  GROUP BY concept)
sub ON sub.concept = c.concept AND c.version = sub.maxVersion;

-- >>> Following code sets injected: diabetes-type-ii v1/polycystic-ovarian-syndrome v1/gestational-diabetes v1

--┌─────┐
--│ Sex │
--└─────┘

-- OBJECTIVE: To get the Sex for each patient.

-- INPUT: Assumes there exists a temp table as follows:
-- #Patients (FK_Patient_Link_ID)
--  A distinct list of FK_Patient_Link_IDs for each patient in the cohort

-- OUTPUT: A temp table as follows:
-- #PatientSex (FK_Patient_Link_ID, Sex)
-- 	- FK_Patient_Link_ID - unique patient id
--	- Sex - M/F

-- ASSUMPTIONS:
--	- Patient data is obtained from multiple sources. Where patients have multiple sexes we determine the sex as follows:
--	-	If the patients has a sex in their primary care data feed we use that as most likely to be up to date
--	-	If every sex for a patient is the same, then we use that
--	-	If there is a single most recently updated sex in the database then we use that
--	-	Otherwise the patient's sex is considered unknown

-- Get all patients sex for the cohort
IF OBJECT_ID('tempdb..#AllPatientSexs') IS NOT NULL DROP TABLE #AllPatientSexs;
SELECT 
	FK_Patient_Link_ID,
	FK_Reference_Tenancy_ID,
	HDMModifDate,
	Sex
INTO #AllPatientSexs
FROM RLS.vw_Patient p
WHERE FK_Patient_Link_ID IN (SELECT FK_Patient_Link_ID FROM #Patients)
AND Sex IS NOT NULL;


-- If patients have a tenancy id of 2 we take this as their most likely Sex
-- as this is the GP data feed and so most likely to be up to date
IF OBJECT_ID('tempdb..#PatientSex') IS NOT NULL DROP TABLE #PatientSex;
SELECT FK_Patient_Link_ID, MIN(Sex) as Sex INTO #PatientSex FROM #AllPatientSexs
WHERE FK_Patient_Link_ID IN (SELECT FK_Patient_Link_ID FROM #Patients)
AND FK_Reference_Tenancy_ID = 2
GROUP BY FK_Patient_Link_ID;

-- Find the patients who remain unmatched
IF OBJECT_ID('tempdb..#UnmatchedSexPatients') IS NOT NULL DROP TABLE #UnmatchedSexPatients;
SELECT FK_Patient_Link_ID INTO #UnmatchedSexPatients FROM #Patients
EXCEPT
SELECT FK_Patient_Link_ID FROM #PatientSex;

-- If every Sex is the same for all their linked patient ids then we use that
INSERT INTO #PatientSex
SELECT FK_Patient_Link_ID, MIN(Sex) FROM #AllPatientSexs
WHERE FK_Patient_Link_ID IN (SELECT FK_Patient_Link_ID FROM #UnmatchedSexPatients)
GROUP BY FK_Patient_Link_ID
HAVING MIN(Sex) = MAX(Sex);

-- Find any still unmatched patients
TRUNCATE TABLE #UnmatchedSexPatients;
INSERT INTO #UnmatchedSexPatients
SELECT FK_Patient_Link_ID FROM #Patients
EXCEPT
SELECT FK_Patient_Link_ID FROM #PatientSex;

-- If there is a unique most recent Sex then use that
INSERT INTO #PatientSex
SELECT p.FK_Patient_Link_ID, MIN(p.Sex) FROM #AllPatientSexs p
INNER JOIN (
	SELECT FK_Patient_Link_ID, MAX(HDMModifDate) MostRecentDate FROM #AllPatientSexs
	WHERE FK_Patient_Link_ID IN (SELECT FK_Patient_Link_ID FROM #UnmatchedSexPatients)
	GROUP BY FK_Patient_Link_ID
) sub ON sub.FK_Patient_Link_ID = p.FK_Patient_Link_ID AND sub.MostRecentDate = p.HDMModifDate
GROUP BY p.FK_Patient_Link_ID
HAVING MIN(Sex) = MAX(Sex);

-- Tidy up - helpful in ensuring the tempdb doesn't run out of space mid-query
DROP TABLE #AllPatientSexs;
DROP TABLE #UnmatchedSexPatients;
--┌───────────────┐
--│ Year of birth │
--└───────────────┘

-- OBJECTIVE: To get the year of birth for each patient.

-- INPUT: Assumes there exists a temp table as follows:
-- #Patients (FK_Patient_Link_ID)
--  A distinct list of FK_Patient_Link_IDs for each patient in the cohort

-- OUTPUT: A temp table as follows:
-- #PatientYearOfBirth (FK_Patient_Link_ID, YearOfBirth)
-- 	- FK_Patient_Link_ID - unique patient id
--	- YearOfBirth - INT

-- ASSUMPTIONS:
--	- Patient data is obtained from multiple sources. Where patients have multiple YOBs we determine the YOB as follows:
--	-	If the patients has a YOB in their primary care data feed we use that as most likely to be up to date
--	-	If every YOB for a patient is the same, then we use that
--	-	If there is a single most recently updated YOB in the database then we use that
--	-	Otherwise we take the highest YOB for the patient that is not in the future

-- Get all patients year of birth for the cohort
IF OBJECT_ID('tempdb..#AllPatientYearOfBirths') IS NOT NULL DROP TABLE #AllPatientYearOfBirths;
SELECT 
	FK_Patient_Link_ID,
	FK_Reference_Tenancy_ID,
	HDMModifDate,
	YEAR(Dob) AS YearOfBirth
INTO #AllPatientYearOfBirths
FROM RLS.vw_Patient p
WHERE FK_Patient_Link_ID IN (SELECT FK_Patient_Link_ID FROM #Patients)
AND Dob IS NOT NULL;


-- If patients have a tenancy id of 2 we take this as their most likely YOB
-- as this is the GP data feed and so most likely to be up to date
IF OBJECT_ID('tempdb..#PatientYearOfBirth') IS NOT NULL DROP TABLE #PatientYearOfBirth;
SELECT FK_Patient_Link_ID, MIN(YearOfBirth) as YearOfBirth INTO #PatientYearOfBirth FROM #AllPatientYearOfBirths
WHERE FK_Patient_Link_ID IN (SELECT FK_Patient_Link_ID FROM #Patients)
AND FK_Reference_Tenancy_ID = 2
GROUP BY FK_Patient_Link_ID;

-- Find the patients who remain unmatched
IF OBJECT_ID('tempdb..#UnmatchedYobPatients') IS NOT NULL DROP TABLE #UnmatchedYobPatients;
SELECT FK_Patient_Link_ID INTO #UnmatchedYobPatients FROM #Patients
EXCEPT
SELECT FK_Patient_Link_ID FROM #PatientYearOfBirth;

-- If every YOB is the same for all their linked patient ids then we use that
INSERT INTO #PatientYearOfBirth
SELECT FK_Patient_Link_ID, MIN(YearOfBirth) FROM #AllPatientYearOfBirths
WHERE FK_Patient_Link_ID IN (SELECT FK_Patient_Link_ID FROM #UnmatchedYobPatients)
GROUP BY FK_Patient_Link_ID
HAVING MIN(YearOfBirth) = MAX(YearOfBirth);

-- Find any still unmatched patients
TRUNCATE TABLE #UnmatchedYobPatients;
INSERT INTO #UnmatchedYobPatients
SELECT FK_Patient_Link_ID FROM #Patients
EXCEPT
SELECT FK_Patient_Link_ID FROM #PatientYearOfBirth;

-- If there is a unique most recent YOB then use that
INSERT INTO #PatientYearOfBirth
SELECT p.FK_Patient_Link_ID, MIN(p.YearOfBirth) FROM #AllPatientYearOfBirths p
INNER JOIN (
	SELECT FK_Patient_Link_ID, MAX(HDMModifDate) MostRecentDate FROM #AllPatientYearOfBirths
	WHERE FK_Patient_Link_ID IN (SELECT FK_Patient_Link_ID FROM #UnmatchedYobPatients)
	GROUP BY FK_Patient_Link_ID
) sub ON sub.FK_Patient_Link_ID = p.FK_Patient_Link_ID AND sub.MostRecentDate = p.HDMModifDate
GROUP BY p.FK_Patient_Link_ID
HAVING MIN(YearOfBirth) = MAX(YearOfBirth);

-- Find any still unmatched patients
TRUNCATE TABLE #UnmatchedYobPatients;
INSERT INTO #UnmatchedYobPatients
SELECT FK_Patient_Link_ID FROM #Patients
EXCEPT
SELECT FK_Patient_Link_ID FROM #PatientYearOfBirth;

-- Otherwise just use the highest value (with the exception that can't be in the future)
INSERT INTO #PatientYearOfBirth
SELECT FK_Patient_Link_ID, MAX(YearOfBirth) FROM #AllPatientYearOfBirths
WHERE FK_Patient_Link_ID IN (SELECT FK_Patient_Link_ID FROM #UnmatchedYobPatients)
GROUP BY FK_Patient_Link_ID
HAVING MAX(YearOfBirth) <= YEAR(GETDATE());

-- Tidy up - helpful in ensuring the tempdb doesn't run out of space mid-query
DROP TABLE #AllPatientYearOfBirths;
DROP TABLE #UnmatchedYobPatients;

-- FIND PATIENTS WITH A DIAGNOSIS OF POLYCYSTIC OVARY SYNDROME OR GESTATIONAL DIABETES, TO EXCLUDE

IF OBJECT_ID('tempdb..#exclusions') IS NOT NULL DROP TABLE #exclusions;
SELECT DISTINCT gp.FK_Patient_Link_ID
INTO #exclusions
FROM [RLS].[vw_GP_Events] gp
LEFT OUTER JOIN #Patients p ON p.FK_Patient_Link_ID = gp.FK_Patient_Link_ID
WHERE (SuppliedCode IN 
	(SELECT [Code] FROM #AllCodes WHERE [Concept] IN 
		('polycystic-ovarian-syndrome', 'gestational-diabetes') AND [Version] = 1
			AND EventDate BETWEEN '2018-07-09' AND '2022-03-31')) 
    
---- CREATE TABLE OF ALL PATIENTS THAT HAVE ANY LIFETIME DIAGNOSES OF T2D AS OF 2019-07-01

IF OBJECT_ID('tempdb..#diabetes2_diagnoses') IS NOT NULL DROP TABLE #diabetes2_diagnoses;
SELECT gp.FK_Patient_Link_ID, 
		YearOfBirth, 
		Sex,
		EthnicMainGroup,
		EventDate,
		SuppliedCode,
		[diabetes_type_i_Code] = CASE WHEN SuppliedCode IN 
					( SELECT [Code] FROM #AllCodes WHERE [Concept] IN ('diabetes-type-i') AND [Version] = 1 ) THEN 1 ELSE 0 END,
		[diabetes_type_ii_Code] = CASE WHEN SuppliedCode IN 
					( SELECT [Code] FROM #AllCodes WHERE [Concept] IN ('diabetes-type-ii') AND [Version] = 1 ) THEN 1 ELSE 0 END

INTO #diabetes2_diagnoses
FROM [RLS].[vw_GP_Events] gp
LEFT OUTER JOIN #Patients p ON p.FK_Patient_Link_ID = gp.FK_Patient_Link_ID
LEFT OUTER JOIN #PatientYearOfBirth yob ON yob.FK_Patient_Link_ID = p.FK_Patient_Link_ID
LEFT OUTER JOIN #PatientSex sex ON sex.FK_Patient_Link_ID = p.FK_Patient_Link_ID
WHERE (SuppliedCode IN 
	(SELECT [Code] FROM #AllCodes WHERE [Concept] IN ('diabetes-type-ii') AND [Version] = 1)) 
    AND gp.FK_Patient_Link_ID IN (SELECT FK_Patient_Link_ID FROM #Patients)
    AND gp.FK_Patient_Link_ID NOT IN (SELECT FK_Patient_Link_ID FROM #exclusions) -- exclude patients with polycystic ovary syndrome or gestational diabetes
	AND (gp.EventDate) <= '2019-07-01'
	AND DATEDIFF(YEAR, yob.YearOfBirth, '2019-07-01') >= 18


-- Define the main cohort to be matched
IF OBJECT_ID('tempdb..#MainCohort') IS NOT NULL DROP TABLE #MainCohort;
SELECT DISTINCT FK_Patient_Link_ID, 
		YearOfBirth, -- NEED TO ENSURE OVER 18S ONLY AT SOME POINT
		Sex,
		EthnicMainGroup,
		IMD2019Decile1IsMostDeprived10IsLeastDeprived
INTO #MainCohort
FROM #diabetes2_diagnoses
--WHERE FK_Patient_Link_ID IN (#####INTERVENTION_TABLE) -- only get patients that had a diabetes intervention


/*

-- Define the population of potential matches for the cohort
IF OBJECT_ID('tempdb..#PotentialMatches') IS NOT NULL DROP TABLE #PotentialMatches;
SELECT DISTINCT p.FK_Patient_Link_ID, Sex, YearOfBirth
INTO #PotentialMatches
FROM #diabetes2_diagnoses
WHERE p.FK_Patient_Link_ID NOT IN (SELECT FK_Patient_Link_ID FROM #MainCohort)


--┌────────────────────────────────────────────────────┐
--│ Cohort matching on year of birth / sex 					   │
--└────────────────────────────────────────────────────┘

-- OBJECTIVE: To take a primary cohort and find a 1:n matched cohort based on year of birth and sex.

-- INPUT: Takes two parameters
--  - yob-flex: integer - number of years each way that still allow a year of birth match
--  - num-matches: integer - number of matches for each patient in the cohort
-- Requires two temp tables to exist as follows:
-- #MainCohort (FK_Patient_Link_ID, Sex, YearOfBirth)
-- 	- FK_Patient_Link_ID - unique patient id
--	- Sex - M/F
--	- YearOfBirth - Integer
-- #PotentialMatches (FK_Patient_Link_ID, Sex, YearOfBirth)
-- 	- FK_Patient_Link_ID - unique patient id
--	- Sex - M/F
--	- YearOfBirth - Integer

-- OUTPUT: A temp table as follows:
-- #CohortStore (FK_Patient_Link_ID, YearOfBirth, Sex, MatchingPatientId, MatchingYearOfBirth)
--  - FK_Patient_Link_ID - unique patient id for primary cohort patient
--  - YearOfBirth - of the primary cohort patient
--  - Sex - of the primary cohort patient
--  - MatchingPatientId - id of the matched patient
--  - MatchingYearOfBirth - year of birth of the matched patient

-- First we extend the #PrimaryCohort table to give each age-sex combo a unique number
-- and to avoid polluting the #MainCohort table
IF OBJECT_ID('tempdb..#Cases') IS NOT NULL DROP TABLE #Cases;
SELECT FK_Patient_Link_ID AS PatientId, YearOfBirth, Sex, Row_Number() OVER(PARTITION BY YearOfBirth, Sex ORDER BY FK_Patient_Link_ID) AS CaseRowNumber
INTO #Cases FROM #MainCohort;

-- Then we do the same with the #PotentialMatches
IF OBJECT_ID('tempdb..#Matches') IS NOT NULL DROP TABLE #Matches;
SELECT FK_Patient_Link_ID AS PatientId, YearOfBirth, Sex, Row_Number() OVER(PARTITION BY YearOfBirth, Sex ORDER BY FK_Patient_Link_ID) AS AssignedPersonNumber
INTO #Matches FROM #PotentialMatches;

-- Find the number of people with each characteristic in the main cohort
IF OBJECT_ID('tempdb..#CharacteristicCount') IS NOT NULL DROP TABLE #CharacteristicCount;
SELECT YearOfBirth, Sex, COUNT(*) AS [Count] INTO #CharacteristicCount FROM #Cases GROUP BY YearOfBirth, Sex;

-- Find the number of potential matches for each Age/Sex combination
-- The output of this is useful for seeing how many matches you can get
-- SELECT A.YearOfBirth, A.Sex, B.Count / A.Count AS NumberOfPotentialMatchesPerCohortPatient FROM (SELECT * FROM #CharacteristicCount) A LEFT OUTER JOIN (SELECT YearOfBirth, Sex, COUNT(*) AS [Count] FROM #Matches GROUP BY YearOfBirth, Sex) B ON B.YearOfBirth = A.YearOfBirth AND B.Sex = A.Sex ORDER BY NumberOfPotentialMatches,A.YearOfBirth,A.Sex;

-- The final table contains a row for each match, so e.g. if patient 1 has 4
-- matches then there will be 4 rows in the table for this.
IF OBJECT_ID('tempdb..#CohortStore') IS NOT NULL DROP TABLE #CohortStore;
CREATE TABLE #CohortStore(
  PatientId BIGINT, 
  YearOfBirth INT, 
  Sex nchar(1), 
  MatchingPatientId BIGINT,
  MatchingYearOfBirth INT
) ON [PRIMARY];

--1. First match try to match people exactly. We do this as follows:
--    - For each YOB/Sex combination we find all potential matches. E.g. all patients
--      in the potential matches with sex='F' and yob=1957
--    - We then try to assign a single match to all cohort members with sex='F' and yob=1957
--    - If there are still matches unused, we then assign a second match to all cohort members
--    - This continues until we either run out of matches, or successfully match everyone with
--      the desired number of matches.
DECLARE @Counter1 INT; 
SET @Counter1=1;
-- In this loop we find one match at a time for each patient in the cohort
WHILE ( @Counter1 <= 20)
BEGIN
  INSERT INTO #CohortStore
  SELECT c.PatientId, c.YearOfBirth, c.Sex, p.PatientId AS MatchedPatientId, c.YearOfBirth
  FROM #Cases c
    INNER JOIN #CharacteristicCount cc on cc.YearOfBirth = c.YearOfBirth and cc.Sex = c.Sex
    INNER JOIN #Matches p 
      ON p.Sex = c.Sex 
      AND p.YearOfBirth = c.YearOfBirth 
      -- This next line is the trick to only matching each person once
      AND p.AssignedPersonNumber = CaseRowNumber + (@counter1 - 1) * cc.[Count];

  -- We might not need this, but to be extra sure let's delete any patients who 
  -- we're already using to match people
  DELETE FROM #Matches WHERE PatientId IN (SELECT MatchingPatientId FROM #CohortStore);

  SET @Counter1  = @Counter1  + 1
END

--2. Now relax the yob restriction to get extra matches for people with no matches
DECLARE @LastRowInsert1 INT;
SET @LastRowInsert1=1;
WHILE ( @LastRowInsert1 > 0)
BEGIN
  INSERT INTO #CohortStore
  SELECT sub.PatientId, sub.YearOfBirth, sub.Sex, MatchedPatientId, MAX(m.YearOfBirth) FROM (
  SELECT c.PatientId, c.YearOfBirth, c.Sex, MAX(p.PatientId) AS MatchedPatientId, Row_Number() OVER(PARTITION BY MAX(p.PatientId) ORDER BY p.PatientId) AS AssignedPersonNumber
  FROM #Cases c
  INNER JOIN #Matches p 
    ON p.Sex = c.Sex 
    AND p.YearOfBirth >= c.YearOfBirth - 1
    AND p.YearOfBirth <= c.YearOfBirth + 1
  WHERE c.PatientId in (
    -- find patients who aren't currently matched
    select PatientId from #Cases except select PatientId from #CohortStore
  )
  GROUP BY c.PatientId, c.YearOfBirth, c.Sex, p.PatientId) sub
  INNER JOIN #Matches m 
    ON m.Sex = sub.Sex 
    AND m.PatientId = sub.MatchedPatientId
    AND m.YearOfBirth >= sub.YearOfBirth - 1
    AND m.YearOfBirth <= sub.YearOfBirth + 1
  WHERE sub.AssignedPersonNumber = 1
  GROUP BY sub.PatientId, sub.YearOfBirth, sub.Sex, MatchedPatientId;
  SELECT @LastRowInsert1=@@ROWCOUNT;

  DELETE FROM #Matches WHERE PatientId IN (SELECT MatchingPatientId FROM #CohortStore);
END

--3. Now relax the yob restriction to get extra matches for people with only 1, 2, 3, ... n-1 matches
DECLARE @Counter2 INT; 
SET @Counter2=1;
WHILE (@Counter2 < 20)
BEGIN
  DECLARE @LastRowInsert INT;
  SET @LastRowInsert=1;
  WHILE ( @LastRowInsert > 0)
  BEGIN

    IF OBJECT_ID('tempdb..#CohortPatientForEachMatchingPatient') IS NOT NULL DROP TABLE #CohortPatientForEachMatchingPatient;
    SELECT p.PatientId AS MatchedPatientId, c.PatientId, Row_Number() OVER(PARTITION BY p.PatientId ORDER BY p.PatientId) AS MatchedPatientNumber
    INTO #CohortPatientForEachMatchingPatient
    FROM #Matches p
    INNER JOIN #Cases c
      ON p.Sex = c.Sex 
      AND p.YearOfBirth >= c.YearOfBirth - 1
      AND p.YearOfBirth <= c.YearOfBirth + 1
    WHERE c.PatientId IN (
      -- find patients who only have @Counter2 matches
      SELECT PatientId FROM #CohortStore GROUP BY PatientId HAVING count(*) = @Counter2
    );

    IF OBJECT_ID('tempdb..#CohortPatientForEachMatchingPatientWithCohortNumbered') IS NOT NULL DROP TABLE #CohortPatientForEachMatchingPatientWithCohortNumbered;
    SELECT PatientId, MatchedPatientId, Row_Number() OVER(PARTITION BY PatientId ORDER BY MatchedPatientId) AS PatientNumber
    INTO #CohortPatientForEachMatchingPatientWithCohortNumbered
    FROM #CohortPatientForEachMatchingPatient
    WHERE MatchedPatientNumber = 1;

    INSERT INTO #CohortStore
    SELECT s.PatientId, c.YearOfBirth, c.Sex, MatchedPatientId, m.YearOfBirth FROM #CohortPatientForEachMatchingPatientWithCohortNumbered s
    LEFT OUTER JOIN #Cases c ON c.PatientId = s.PatientId
    LEFT OUTER JOIN #Matches m ON m.PatientId = MatchedPatientId
    WHERE PatientNumber = 1;

    SELECT @LastRowInsert=@@ROWCOUNT;

    DELETE FROM #Matches WHERE PatientId IN (SELECT MatchingPatientId FROM #CohortStore);
  END
  
  SET @Counter2  = @Counter2  + 1
END


-- Get the matched cohort detail - same as main cohort
IF OBJECT_ID('tempdb..#MatchedCohort') IS NOT NULL DROP TABLE #MatchedCohort;
SELECT 
  c.MatchingPatientId AS FK_Patient_Link_ID,
  Sex,
  MatchingYearOfBirth,
  EthnicMainGroup,
  PatientId AS PatientWhoIsMatched
INTO #MatchedCohort
FROM #CohortStore c
LEFT OUTER JOIN #Patients p ON p.FK_Patient_Link_ID = c.MatchingPatientId
WHERE c.PatientId IN (SELECT FK_Patient_Link_ID FROM #Patients);

-- Define a table with all the patient ids for the main cohort and the matched cohort
IF OBJECT_ID('tempdb..#PatientIds') IS NOT NULL DROP TABLE #PatientIds;
SELECT PatientId AS FK_Patient_Link_ID INTO #PatientIds FROM #CohortStore
UNION
SELECT MatchingPatientId FROM #CohortStore;

*/

-- RX OF MEDS SINCE 01.07.19 FOR PATIENTS WITH T2D

IF OBJECT_ID('tempdb..#meds') IS NOT NULL DROP TABLE #meds;
SELECT 
	 m.FK_Patient_Link_ID,
	 CAST(MedicationDate AS DATE) as PrescriptionDate,
	 [description] = CASE WHEN s.[description] IS NOT NULL THEN s.[description] ELSE c.[description] END
INTO #meds
FROM RLS.vw_GP_Medications m
LEFT OUTER JOIN #VersionedSnomedSets s ON s.FK_Reference_SnomedCT_ID = m.FK_Reference_SnomedCT_ID
LEFT OUTER JOIN #VersionedCodeSets c ON c.FK_Reference_Coding_ID = m.FK_Reference_Coding_ID
WHERE m.FK_Patient_Link_ID IN (SELECT FK_Patient_Link_ID FROM #diabetes2_diagnoses)
AND m.MedicationDate > '2019-07-01' 

-- Produce final table of all medication prescriptions for T2D patients

SELECT PatientId, 
	[description], 
	PrescriptionDate
FROM #meds
ORDER BY PatientId,
	[description],
	PrescriptionDate


